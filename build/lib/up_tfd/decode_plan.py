from typing import IO, Any, Callable, Optional, List, Tuple, Union, cast
import re
from fractions import Fraction

def _plan_from_file(
        plan_filename,
    ):

        actions: List = []
        with open(plan_filename) as plan:
            is_tt = False
            for line in plan.readlines():
                if re.match(r"^\s*(;.*)?$", line):
                    print("commented line")
                    continue
                line = line.lower()
                s_ai = re.match(r"^\s*\(\s*([\w?-]+)((\s+[\w?-]+)*)\s*\)\s*$", line)
                t_ai = re.match(
                    r"^\s*(\d+\.\d+):\s*\(\s*([\w-]+)([\s\w-]*)\)\s*\[(\d+\.\d+)\]\s*$",
                    # r"^\s*(\d+)\s*:\s*\(\s*([\w?-]+)((\s+[\w?-]+)*)\s*\)\s*(\[\s*(\d+)\s*\])?\s*$",
                    line,
                )
                if s_ai:
                    assert is_tt == False
                    name = s_ai.group(1)
                    params_name = s_ai.group(2).split()
                elif t_ai:
                    # print(f"groups:")
                    # print(t_ai.group(1))
                    # print(t_ai.group(2))
                    # print(t_ai.group(3))
                    # print(t_ai.group(4))
                    is_tt = True
                    start = Fraction(t_ai.group(1))
                    name = t_ai.group(2)
                    params_name = [arg.strip() for arg in t_ai.group(3).split()]
                    dur = None
                    if t_ai.group(4) is not None:
                        dur = Fraction(t_ai.group(4))
                else:
                    print(
                        "Error parsing plan generated by "
                    )
                    exit(1)

        #         action = get_item_named(name)
        #         assert isinstance(action, up.model.Action), "Wrong plan or renaming."
        #         parameters = []
        #         for p in params_name:
        #             obj = get_item_named(p)
        #             assert isinstance(obj, up.model.Object), "Wrong plan or renaming."
        #             parameters.append(problem.env.expression_manager.ObjectExp(obj))
        #         act_instance = up.plans.ActionInstance(action, tuple(parameters))
        #         if is_tt:
        #             actions.append((start, act_instance, dur))
        #         else:
        #             actions.append(act_instance)
        # if is_tt:
        #     return up.plans.TimeTriggeredPlan(actions)
        # else:
        #     return up.plans.SequentialPlan(actions)


_plan_from_file('plan.txt')